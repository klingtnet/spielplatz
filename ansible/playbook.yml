---
# TODOs
# - reload services on change
# - modularize
# - store secrets encrypted
# - cron for postgres backup (pg_dumpall | tar --use-compress-programm=pixz -cJf postgres-$(date foobar).tar.xz
- hosts: all
  vars:
    domain: klingt.vnet
    domain_version: unknown
    db_name: klingt-net
    # TODO encrypt this!
    db_password: ThisIsInsecure
    postgres_host: localhost
    postgres_port: 5432
    pgweb_path: /usr/bin/pgweb
    pgweb_port: 9999
    gitea_path: /usr/bin/gitea
    gitea_user: gitea
    gitea_group: gitea
    gitea_port: 10000
    gitea_db_name: gitea
    gitea_db_password: ThisIsInsecure
    gitea_admin_password: ThisIsInsecure
    jupyter_user: jupyter
    jupyter_group: jupyter
    jupyter_port: 10001
    caddy_user: caddy
    caddy_group: caddy
    caddy_path: /usr/bin/caddy
    caddy_email: admin@klingt.net
    caddy_ca_url: https://acme-staging.api.letsencrypt.org/directory
    caddy_prometheus_port: 9180
    caddy_restic_path: "/home/{{ caddy_user }}/restic"
    caddy_restic_user: alinz
    caddy_restic_password: ThisIsInsecure
    caddy_file_browser_root: "/var/caddy/files.{{ domain }}"
    # ThisIsInsecure
    jupyter_password: 'sha1:7ba04f8b7db3:b647b05c2e317857828f9f4fc929b08d485f9c76'
    prometheus_path: /usr/bin/prometheus
    prometheus_config_path: /etc/prometheus/config.yml
    prometheus_port: 9090
    node_exporter_path: /usr/bin/node_exporter
    node_exporter_port: 9091
    node_exporter_address: "127.0.0.1:{{ node_exporter_port }}"
    grafana_domain: "grafana.{{ domain }}"
    grafana_user: grafana
    grafana_password: ThisIsInsecure
    grafana_group: grafana
    grafana_address: 127.0.0.1
    grafana_port: 10002
    grafana_db_name: grafana
    grafana_db_password: ThisIsInsecure
    user_name: alinz
    user_password: ThisIsInsecure
    user_email: alinz@email.provider
    locale: en_US.UTF-8
  tasks:
  - name: Set version number
    delegate_to: localhost
    shell: git describe --always --tags
    register: git_version
  - set_fact:
      domain_version: "{{ git_version.stdout }}"
  - name: "Generate {{ locale }}"
    locale_gen:
      name: "{{ locale }}"
      state: present
  - name: "Set {{ locale }}"
    become: true
    command: "update-locale LANG={{ locale }}"
  - name: Set timezone to UTC
    timezone:
      name: Etc/UTC
  - name: Update package index
    apt: update_cache=yes package=sudo
    become: true
  - name: Check wheel group
    become: true
    group:
      name: wheel
      state: present
  - name: Allow wheel to sudo (with password)
    become: true
    lineinfile:
      dest: /etc/sudoers
      state: present
      backup: true
      regexp: '^#\s*%wheel\s+ALL=\(ALL\)\s+ALL$'
      line: '%wheel ALL=(ALL) ALL'
  - name: "Create user {{ user_name }}"
    become: true
    user:
      name: "{{ user_name }}"
      comment: "{{ user_email }}"
      append: true
      groups: wheel
      # http://docs.ansible.com/ansible/user_module.html
      password: "{{ user_password }}"
  # POSTGRES
  - name: Install postgres
    become: true
    apt:
      name: "{{ item }}"
      state: latest
    with_items:
      - postgresql
      - python-psycopg2
  - name: Start postgres
    become: true
    systemd:
      name: postgresql
      state: started
      enabled: true
  - name: "Create postgres user {{ user_name }}"
    become: true
    become_user: postgres
    postgresql_user:
      name: "{{ user_name }}"
      password: "{{ db_password }}"
      role_attr_flags: NOSUPERUSER,CREATEDB
  - name: "Create database {{ db_name }}"
    become: true
    become_user: "{{ user_name }}"
    postgresql_db:
      name: "{{ db_name }}"
      login_user: "{{ user_name }}"
      state: present
  - name: "Create schemas"
    become: true
    become_user: "{{ user_name }}"
    postgresql_schema:
      database: "{{ db_name }}"
      name: blog
      login_user: "{{ user_name }}"
      login_password: "{{ db_password }}"
  # PGWEB
  - name: Build pgweb
    command: make -C ./build/pgweb
    delegate_to: localhost
  - name: Install pgweb
    become: true
    copy:
      src: ./build/pgweb/pgweb
      dest: "{{ pgweb_path }}"
      mode: 0755
  - name: Install pgweb systemd unit
    become: true
    template:
      src: ./build/pgweb/pgweb.service.tmpl
      dest: /etc/systemd/system/pgweb.service
      mode: 0600
    register: pgweb_service_result
  - name: Start pgweb
    become: true
    systemd:
      daemon_reload: yes
      name: pgweb
      state: started
      enabled: true
  - name: Restart pgweb
    become: true
    systemd:
      daemon_reload: yes
      name: pgweb
      state: restarted
    when: pgweb_service_result.changed
  # GITEA
  - name: Build gitea
    command: make -C ./build/gitea
    delegate_to: localhost
  - name: Install gitea
    become: true
    copy:
      src: ./build/gitea/gitea
      dest: "{{ gitea_path }}"
      mode: 0755
  - name: Install gitea systemd unit
    become: true
    template:
      src: ./build/gitea/gitea.service.tmpl
      dest: /etc/systemd/system/gitea.service
      mode: 0600
    register: gitea_service_result
  - name: "Create group {{ gitea_group }}"
    become: true
    group:
      name: "{{ gitea_group }}"
  - name: "Create user {{ gitea_user }}"
    become: true
    user:
      name: "{{ gitea_user }}"
      comment: "Gitea run user"
      append: true
      group: "{{ gitea_group }}"
      # needs a shell because of git
  - name: Create gitea folder
    become: true
    become_user: "{{ gitea_user }}"
    file:
      path: "/home/{{ gitea_user }}/gitea/{{ item }}"
      state: directory
      mode: 0700
    with_items:
      - repos
      - logs
      - custom/conf
  - name: Create postgres user gitea
    become: true
    become_user: postgres
    postgresql_user:
      name: gitea
      password: "{{ gitea_db_password }}"
  - name: "Create database {{ gitea_db_name }}"
    become: true
    become_user: "postgres"
    postgresql_db:
      name: gitea
      owner: "{{ gitea_db_name }}"
      state: present
  - name: Create gitea configuration
    become: true
    template:
      src: ./build/gitea/app.ini.tmpl
      dest: /home/gitea/gitea/custom/conf/app.ini
      mode: 0600
      owner: "{{ gitea_user }}"
    register: gitea_config_result
  - name: Start gitea
    become: true
    systemd:
      daemon_reload: yes
      name: gitea
      state: started
      enabled: true
  - name: Restart gitea
    become: true
    systemd:
      daemon_reload: true
      name: gitea
      state: restarted
    when: gitea_config_result.changed or gitea_service_result.changed
  - name: Wait for Gitea to startup
    uri:
      url: "http://127.0.0.1:{{ gitea_port }}/"
      status_code: 200
    register: result
    until: result.status == 200
    retries: 3
    delay: 1
  - name: Check if gitea admin user was created
    become: true
    become_user: "{{ gitea_user }}"
    command: "psql 'postgresql://{{ gitea_user }}:{{ gitea_db_password }}@localhost/{{ gitea_db_name }}' --no-align --tuples-only --quiet --command 'select exists (select 1 from \"user\" where is_admin);'"
    register: gitea_admin_check
  - debug:
      msg: "{{ gitea_admin_check }}"
  - name: "Create gitea admin user {{ user_name }}"
    become: true
    become_user: gitea
    command: "gitea admin create-user --name {{ user_name }} --password {{ gitea_admin_password }} --email {{ user_email }} --admin --config ./gitea/custom/conf/app.ini"
    args:
      chdir: "/home/{{ gitea_user }}"
    when: gitea_admin_check.stdout.strip() == 'f'
  # Jupyter
  - name: "Create group {{jupyter_group }}"
    become: true
    group:
      name: "{{jupyter_group }}"
  - name: "Create user {{jupyter_user }}"
    become: true
    user:
      name: "{{jupyter_user }}"
      comment: Jupyter run user"
      append: true
      group: "{{jupyter_group }}"
      shell: /bin/false
  - name: Install Python3 PIP
    become: true
    apt:
      name: python3-pip
      state: latest
  - name: Install jupyter
    become: true
    become_user: "{{ jupyter_user }}"
    command: pip3 install --user jupyter
  - name: Create jupyter config directory
    become: true
    file:
      path: "/home/{{ jupyter_user }}//.jupyter"
      owner: "{{ jupyter_user }}"
      group: "{{ jupyter_group }}"
      state: directory
      mode: 0700
  - name: Install jupyter configuration
    become: true
    template:
      src: ./build/jupyter/jupyter_notebook_config.py.tmpl
      dest: "/home/{{ jupyter_user }}/.jupyter/jupyter_notebook_config.py"
      owner: "{{ jupyter_user }}"
      group: "{{ jupyter_group }}"
      mode: 0600
    register: jupyter_config_result
  - name: Install jupyter systemd unit
    become: true
    template:
      src: ./build/jupyter/jupyter.service.tmpl
      dest: /etc/systemd/system/jupyter.service
      mode: 0600
    register: jupyter_systemd_result
  - name: Start jupyter
    become: true
    systemd:
      daemon_reload: yes
      name: jupyter
      state: started
      enabled: true
    register: jupyter_service_result
  - name: Restart jupyter
    become: true
    systemd:
      daemon_reload: true
      name: jupyter
      state: restarted
    when: jupyter_config_result.changed or jupyter_service_result.changed
  # CADDY
  - name: "Create group {{ caddy_group }}"
    become: true
    group:
      name: "{{ caddy_group }}"
  - name: Create caddy user
    become: true
    user:
      name: "{{ caddy_user }}"
      comment: "Caddy run user"
      append: true
      group: "{{ caddy_group }}"
      shell: /bin/false
  - name: Build caddy
    command: make -C ./build/caddy
    delegate_to: localhost
  - name: Install caddy
    become: true
    copy:
      src: ./build/caddy/caddy
      dest: "{{ caddy_path }}"
      mode: 0755
  - name: Create caddy certificate directory
    become: true
    file:
      name: "/home/{{ caddy_user }}/certs"
      owner: "{{ caddy_user }}"
      group: "{{ caddy_group }}"
      state: directory
      mode: 0700
  - name: Create caddy restic path
    become: true
    file:
      name: "{{ caddy_restic_path }}"
      owner: "{{ caddy_user }}"
      group: "{{ caddy_group }}"
      state: directory
      mode: 0700
  - name: "Create {{ caddy_file_browser_root }} directory"
    become: true
    file:
      name: "{{ caddy_file_browser_root }}/public"
      owner: "{{ caddy_user }}"
      group: "{{ caddy_group }}"
      state: directory
      mode: 0700
  - name: Create caddy configuration directory
    become: true
    file:
      name: "/etc/caddy"
      owner: "{{ caddy_user }}"
      group: "{{ caddy_group }}"
      state: directory
      mode: 0700
  - name: Configure caddy
    become: true
    template:
      src: "./build/caddy/{{ item }}.tmpl"
      dest: "/etc/caddy/{{ item }}"
      owner: "{{ caddy_user }}"
      group: "{{ caddy_group }}"
      mode: 0600
    with_items:
      - Caddyfile
      - common.caddy
    register: caddy_config_result
  - name: Validate caddy configuration
    become: true
    become_user: "{{ caddy_user }}"
    command: "{{ caddy_path }} -conf=/etc/caddy/Caddyfile -validate"
    when: caddy_config_result.changed
  - name: Install caddy systemd unit
    become: true
    template:
      src: ./build/caddy/caddy.service.tmpl
      dest: /etc/systemd/system/caddy.service
      mode: 0600
    register: caddy_service_result
  - name: Start caddy
    become: true
    systemd:
      daemon_reload: yes
      name: caddy
      state: started
      enabled: true
  - name: Restart caddy
    become: true
    systemd:
      daemon_reload: yes
      name: caddy
      state: restarted
    when: caddy_config_result.changed or caddy_service_result.changed
  # PROMETHEUS
  - name: Build prometheus
    command: make -C ./build/prometheus
    delegate_to: localhost
  - name: Install prometheus
    become: true
    copy:
      src: ./build/prometheus/prometheus
      dest: "{{ prometheus_path }}"
      mode: 0755
  - name: Create prometheus folder
    become: true
    file:
      path: /etc/prometheus
      state: directory
      mode: 0700
  - name: Install prometheus configuration
    become: true
    template:
      src: ./build/prometheus/prometheus.yml.tmpl
      dest: /etc/prometheus/config.yml
      mode: 0600
    register: prometheus_config_result
  - name: Install prometheus systemd unit
    become: true
    template:
      src: ./build/prometheus/prometheus.service.tmpl
      dest: /etc/systemd/system/prometheus.service
      mode: 0600
    register: prometheus_service_result
  - name: Start prometheus
    become: true
    systemd:
      daemon_reload: yes
      name: prometheus
      state: started
      enabled: true
  - name: Restart prometheus
    become: true
    systemd:
      name: prometheus
      state: restarted
      daemon_reload: true
    when: prometheus_config_result.changed or prometheus_service_result.changed
  # NODE_EXPORTER
  - name: Build node_exporter
    command: make -C ./build/node_exporter
    delegate_to: localhost
  - name: Install node_exporter
    become: true
    copy:
      src: ./build/node_exporter/node_exporter
      dest: "{{ node_exporter_path }}"
      mode: 0755
  - name: Install node_exporter systemd unit
    become: true
    template:
      src: ./build/node_exporter/node_exporter.service.tmpl
      dest: /etc/systemd/system/node_exporter.service
      mode: 0600
    register: node_exporter_service_result
  - name: Start node_exporter
    become: true
    systemd:
      daemon_reload: yes
      name: node_exporter
      state: started
      enabled: true
  - name: Restart node_exporter
    become: true
    systemd:
      daemon_reload: true
      name: node_exporter
      state: restarted
    when: node_exporter_service_result.changed
  # GRAFANA
  - name: "Create group {{ grafana_group }}"
    become: true
    group:
      name: "{{ grafana_group }}"
  - name: Create grafana user
    become: true
    user:
      name: "{{ grafana_user }}"
      comment: "Grafana run user"
      append: true
      group: "{{ grafana_group }}"
      shell: /bin/false
  - name: Create postgres user grafana
    become: true
    become_user: postgres
    postgresql_user:
      name: grafana
      password: "{{ grafana_db_password }}"
  - name: Build grafana
    command: make -C ./build/grafana
    delegate_to: localhost
  - name: Create grafana homepath
    become: true
    file:
      path: /usr/share/grafana
      state: directory
      mode: 0755
  - name: Install grafana
    become: true
    # copy does not scale for directories
    synchronize:
      src: "./build/grafana/grafana/{{ item.src }}"
      dest: "{{ item.dest }}"
    with_items:
      - { src: 'bin/grafana-server', dest: '/usr/bin/grafana-server' }
      - { src: 'conf', dest: '/usr/share/grafana' }      
      - { src: 'public', dest: '/usr/share/grafana' }
  - name: Create grafana config path
    become: true
    file:
      path: /etc/grafana
      state: directory
      mode: 0755
  - name: Install grafana configuration
    become: true
    template:
      src: ./build/grafana/config.ini.tmpl
      dest: /etc/grafana/config.ini
      mode: 0644 
    register: grafana_config_result
  - name: Install grafana systemd unit
    become: true
    template:
      src: ./build/grafana/grafana.service.tmpl
      dest: /etc/systemd/system/grafana.service
      mode: 0600
    register: grafana_service_result
  - name: Create postgres user grafana
    become: true
    become_user: postgres
    postgresql_user:
      name: grafana
      password: "{{ grafana_db_password }}"
  - name: "Create database {{ grafana_db_name }}"
    become: true
    become_user: "postgres"
    postgresql_db:
      name: grafana
      owner: "{{ grafana_db_name }}"
      state: present
  - name: Start grafana
    become: true
    systemd:
      daemon_reload: yes
      name: grafana
      state: started
      enabled: true
  - name: Restart grafana
    become: true
    systemd:
      daemon_reload: true
      name: grafana
      state: restarted
    when: grafana_config_result.changed or grafana_service_result.changed
